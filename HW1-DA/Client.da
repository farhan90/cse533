import sys
import random

'''This is a client process
handles all the client transactions'''

class Client(process):
    def setup(master, clientNum,transList,randomReq,bankNames):
        self.reqCount = 0
        

    def main():
        
        if(transList!=None):
            for i in range(len(transList)):
                transaction={}
                transaction['accountNum']=transList[i]['accountNum']
                transaction['type']=transList[i]['type']
                transaction['amount']=transList[i].get('amount',0)
                transaction['bank']=transList[i]['bank']
                transaction['reqId']=transList[i].get('reqId',None)
                timeout=transList[i].get('timeout',1)
                sendTransaction(transaction,timeout)

        if randomReq!=None:
            random.seed(randomReq["seed"])
            for i in range(randomReq["numReq"]):
                output("GENERATING RANDOM REQUEST")
                transaction=getRandomTransaction() 
                sendTransaction(transaction,i*2)  

        
        await(False)


    def getRandomTransaction():
        index=random.randint(0,len(bankNames)-1) #inclusive 
        bank=bankNames[index]
        reqType=getRandomReqType()
        amount=random.randint(0,100)
        accountNum=random.randint(0,10)
        transaction={
            'accountNum' : accountNum,
            'type' : reqType,
            'amount' : amount,
            'bank' : bank
        }
        return transaction

    def getRandomReqType():
        randNum=random.random()
        if randNum<randomReq['probGetBalance'] or randomReq['probWithdraw']+randomReq['probDeposit']<randNum:
            return "getBalance"
        if randNum<randomReq['probWithdraw'] or randomReq['probGetBalance']+randomReq['probDeposit']<randNum:
            return "withdraw"
    
        return "deposit"
        

    '''A helper method to send transaction depending on the
    type of transaction'''

    def sendTransaction(transaction, time):

        if await(False): pass
        elif timeout(time): 
            output("SENDING TRANSACTION\n"+str(transaction));
            if transaction['type'] == 'getBalance':
                getTail(transaction)
            else:
                getHead(transaction)
    

    '''Handler functions for send and receiving messages'''

    def getTail(transaction):
        send(('getTail', transaction), to=master)
    
    def receive(msg=('getTail',tail, transaction), from_=p):
        reqId = transaction.get('reqId', None)
        if reqId == None:
            reqId = genReqId(transaction['bank'])
        transaction['reqId'] = reqId
        send(('getBalance', transaction), to=tail)

    def getHead(transaction):
        send(('getHead',transaction), to=master)

    def receive(msg=('getHead',head, transaction), from_=p):
        reqId = transaction.get('reqId', None)
        if reqId == None:
            reqId = genReqId(transaction['bank'])
        sendToServer(transaction['type'], transaction['accountNum'], transaction['amount'], transaction['bank'], reqId, head)

    def sendToServer(type, accountNum, amount, bank, reqId, head):
        send((type, {
            'reqId' : reqId,
            'accountNum' : accountNum,
            'amount' : amount
        }), to=head)

    def receive(msg=('response',message), from_=p):
        output("Client received: " + str(message))

    def genReqId(bank):
        index = bankNames.index(bank)
        reqCount += 1
        return (str(index) + "." + str(clientNum) + "." + str(reqCount))
