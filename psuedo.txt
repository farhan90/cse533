James Bouker 	SBID: 107091895
Farhan Ali 		SBID: 107450803

-- Description of Transfer --
	Transfers are handled in 2 cases:
		1. destBank and sourceBanks are the same
			In this case we simply check if the sourceAct has enough funds. If it does 
			take out the money and deposit into the destAct
		2. destBank and sourceBanks are different (2 Cases):
			1. destBank is not null:
				This mean we are a node in the source bank. We propogate the request to the tail 
				withdrawing money and recording the request as we go along the chain

				When the request gets to the tail -> send a request to the head of the destBank.
				*Note: When forming request set destAct to null

			2. destBank is null:
				This means we are a node in the destBank. We propogates the request to the tail
				depositing money and recording the request as we go along the chain

				When the request gets to the tail -> send a response to the tails pred, starting a chain of backwards
				requests removing the request from pending as we go.

				When the backwards request hits the head, we forward this to the tail of the source bank.
				They then continue the backward request until the source head as recieved it.

-- PSEUDO CODE -- 

MASTER CODE
	'banks'	map of banks to online servers
		'onlineServers' list of all servers up and running in the chain
	init :
		//creates a list of all servers in order they appear in the chain
		//also propogates the onlineServers list and bank map

	getTail() :
		reply tail

	setTail(newTail) :
		tail = newTail
		 banks[tail].onlineServers.add(tail)

	getHead(bank) :
		reply banks[bank].head

	//is called when a server fails (terminated)
	detectFailure(failedNode, bank) :
		if(failedNode isHead)
			head = getNextHeadForBank(bank)
		else if (failedNode isTail) 
			tail = getNewTailForBank(bank)

		//assume arrays out of bounds return null
		i = 0
		for bank in banks
			for server in bank.onlineServers
				//triggers 'onFailureMessageFromMaster' in SERVER code
				server.sendFailureMessage(onlineServer[i+1], onlineServer[i-1], failedNode)
				i++

	//is called when a server is rebooted
	newTaillWantsToJoin(joiningServer) : 
		banks[joiningServer].tail.setNewTail(joiningServer)

CLIENT CODE

	getBalance(bankName, accountNum) :
		tail = master.getBank(bankName).getTail()
		reqId = genReqId(bankName, accountNum)

		//this is a request to tail
		actBalance = tail.getBalance(reqId, accountNum)
		return <reqId, Processed, actBalance>

	withdraw(bankName, accountNum, amount) : 
		tail = master.getBank(bankName).getTail()
		reqId = genReqId(bankName, accountNum)
		
		response = head.withdraw(reqId, accountNum, amount)
		log(response)


	depsoit(bankName, accountNum, amount) : 
		tail = master.getBank(bankName).getTail()
		reqId = genReqId(bankName, accountNum)

		response = head.depsoit(reqId, accountNum, amount)
		log(response)


	transfer(accountNum, amount, destBank, destAct) :
		head = master.getHead(destBank)
		reqId = genReqId(bankName, accountNum)


		response = head.transfer(reqId, accountNum, amount, destBank, destAct)
		log(response)

	#pragma mark - Client Helper Functions

	genReqId(bankName, accountNum) :
		requestCount++
		return 'bankName' + '.' + 'accountNum' + '.' + requestCount


SERVER CODE

	DATA:
	'accounts' is a map of accountNumbers to Balance
	'proccessedTrans' is a map of reqIds to proccessed transactions

	getBalance(reqId, accountNum) :
		if(accounts[accountNum] == null) //doesn't exist
			accounts[accountNum] = 0

		reply accounts[accountNum]

	//called when succ calls 'send(pred, reqId)'
	onResponseFromSucc(requestData) :
		//clean up pendingList and send to pred
		reqId = requestData.reqId
		pendingList[reqId] = null;
		if not head
			send(pred, requestData)
		else if (pendingList[reqId].type == transfer)
			item = pendingList[reqId]
			if(item.sourceBank not null && item.sourceBank != self)
				send(item.sourceBank, reqId)

	//called when the new pred detects a failure in it's old succ
	onMessageFromPred(newPendingList) :
		//any data that is not proccessed, proccess
		for item in newPendingList
			if item not in pendingList 
				pendingList.add(item)
				if(item.type == withdraw)
					withdraw(item.reqId, item.accountNum, item.amount)
				else if(item.type == deposit)
					deposit(item.reqId, item.accountNum, item.amount)
				else if(item.type == transfer)
					transfer(item.reqId, item.accountNum, item.amount, item.destBank, item.destAct)

	onFailureMessageFromMaster(newSucc, newPred, failedNode) :
		oldSucc = succ
		succ = newSucc
		pred = newPred

		isHead = (newPred == null)
		isTail = (newSucc == null)

		//if the failed node was your old succ, send pendingList to newSucc
		if not isHead AND not isTail AND failedNode == oldSucc
			send(succ, pendingList) // triggers 'onMessageFromPred' in SEVER code


	withdraw(reqId, accountNum, amount) : 
		requestData = {
				reqId 		: reqId,
				amount 		: amount, 
				accountNum 	: accountNum,
				type 		: withdraw 
		}
		if(accounts[accountNum] == null) //doesn't exist
			accounts[accountNum] = 0

		outcome = null
		if(proccessedTrans[reqId] == null) //doesn't exist
			if(accounts[accountNum] >= amount)
				accounts[accountNum] -= amount
				proccessedTrans[reqId] = requestData
				outcome = Processed
			else
				outcome = InsufficientFunds
		else
			if(proccessedTrans[reqId] == requestData) 
				outcome = Proccessed
			else
				outcome = IncosistentHistory

		if tail
			reply <reqId, outcome, accounts[accountNum]>
			send(pred, requestData)
		else 
			send(suc, requestData)
			pendingList.add(requestData)


	deposit(reqId, accountNum, amount) : 
		requestData = {
				reqId 		: reqId,
				amount 		: amount, 
				accountNum 	: accountNum,
				type 		: deposit 
		}

		if(accounts[accountNum] == null) //doesn't exist
			accounts[accountNum] = 0

		outcome = null
		if(proccessedTrans[reqId] == null) //doesn't exist
			accounts[accountNum] += amount
			proccessedTrans[reqId] = requestData
			outcome = Processed
		else
			if(proccessedTrans[reqId] = requestData) 
				outcome = Proccessed
			else
				outcome = IncosistentHistory

		if tail
			reply <reqId, outcome, accounts[accountNum]>
			send(pred, requestData) //send backwards so nodes remove 
		else 
			pendingList.add(requestData)
			send(suc, requestData)



	#pragma mark - Adding Tail

	setNewTail(newSucc) :
		wasTail = isTail
		succ = newSucc
		isTail = (succ == null)

		if(wasTail) 	
			send(succ, proccessedTrans, accounts) //triggers 'onMessageFromPred' in SERVER code

	onMessageFromPred(oldTail, newProccessedTransList, newAccounts) :
		accounts = newAccounts
		proccessedTrans = newProccessedTransList
		isTail = true
		pred = oldTail 
		master.setTail(self) //triggers 'setTail' in MASTER code


	#pragma mark - Transfer

	transfer(reqId, accountNum, amount, destBank, destAct) :
		requestData = {
			reqId 		: reqId,
			amount 		: amount, 
			accountNum 	: accountNum,
			type 		: deposit, 
			destBank	: destBank,
			destAct		: destAct,
		}
		//we are destination AND source bank
		if(destBank == self) 
			//doesn't exist
			if(accounts[accountNum] == null)
				accounts[accountNum] = 0
			if(accounts[destAct] == null)
				accounts[destAct] = 0

			outcome = null
			if(proccessedTrans[reqId] == null) //doesn't exist
				if(accounts[accountNum] >= amount)
					accounts[accountNum] -= amount
					accounts[destAct] += amount
					proccessedTrans[reqId] = requestData 
					outcome = Processed
				else
					outcome = InsufficientFunds
			else
				if(proccessedTrans[reqId] == requestData) 
					outcome = Proccessed
				else
					outcome = IncosistentHistory

			if tail
				reply <reqId, outcome, accounts[destAct]>
				send(pred, requestData)
			else 
				send(suc, requestData)
				pendingList.add(requestData)
		
		else // not the same bank

			//we are the destBank - deposit money
			if(destBank == null)
				//doesn't exist
				if(accounts[destAct] == null)
					accounts[destAct] = 0

				outcome = null
				if(proccessedTrans[reqId] == null) //doesn't exist
					accounts[destAct] += amount
					proccessedTrans[reqId] = requestData
					outcome = Processed
				else
					if(proccessedTrans[reqId] == requestData) 
						outcome = Proccessed
					else
						outcome = IncosistentHistory

				if tail
					reply <reqId, outcome, accounts[destAct]>
					send(pred, requestData)
				else 
					send(suc, requestData)
					pendingList.add(requestData)

			else //we are the sourceBank - withdraw money
				requestData.sourceBank = self

				//doesn't exist
				if(accounts[accountNum] == null)
					accounts[accountNum] = 0

				outcome = null
				if(proccessedTrans[reqId] == null) //doesn't exist
					if(accounts[accountNum] >= amount)
						accounts[accountNum] -= amount
						proccessedTrans[reqId] = requestData
						outcome = Processed
					else
						outcome = InsufficientFunds
				else
					if(proccessedTrans[reqId] == requestData) 
						outcome = Proccessed
					else
						outcome = IncosistentHistory

				if tail
					requestData.destBank = null
					send(master.getHead(destBank), requestData)
				else
					send(suc, requestData)
				
				pendingList.add(requestData)
